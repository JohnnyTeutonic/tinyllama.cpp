name: Build Wheels

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.cuda_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # CPU-only builds
          - os: ubuntu-latest
            cuda_version: "cpu"
            cuda_toolkit: ""
            wheel_suffix: ""
          - os: windows-latest
            cuda_version: "cpu"
            cuda_toolkit: ""
            wheel_suffix: ""
          
          # GPU builds (Linux only for now - most common for GPU workloads)
          - os: ubuntu-latest
            cuda_version: "11.8"
            cuda_toolkit: "cuda-toolkit-11-8"
            wheel_suffix: "-cu118"
          - os: ubuntu-latest
            cuda_version: "12.1"
            cuda_toolkit: "cuda-toolkit-12-1"
            wheel_suffix: "-cu121"
          # Windows GPU builds
          - os: windows-latest
            cuda_version: "11.8"
            cuda_toolkit: "11.8.0"
            wheel_suffix: "-cu118"
          - os: windows-latest
            cuda_version: "12.1"
            cuda_toolkit: "12.1.0"
            wheel_suffix: "-cu121"

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel cibuildwheel

    # Windows CUDA setup
    - name: Install CUDA Toolkit (Windows)
      if: matrix.os == 'windows-latest' && matrix.cuda_version != 'cpu'
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: ${{ matrix.cuda_toolkit }}
        method: 'network'
        sub-packages: '["nvcc", "cudart", "cublas", "cublas_dev", "curand", "curand_dev"]'

    # Set build environment variables
    - name: Set build environment
      shell: bash
      run: |
        if [ "${{ matrix.cuda_version }}" != "cpu" ]; then
          echo "TINYLLAMA_CPP_BUILD_CUDA=1" >> $GITHUB_ENV
          echo "CMAKE_CUDA_ARCHITECTURES=75;80;86;89;90" >> $GITHUB_ENV
        else
          echo "TINYLLAMA_CPP_BUILD_CUDA=0" >> $GITHUB_ENV
        fi

    # Modify version for CUDA builds
    - name: Modify package version for CUDA builds
      if: matrix.cuda_version != 'cpu'
      shell: bash
      run: |
        # Create a modified pyproject.toml with CUDA version suffix (NOT package name change)
        python -c "
        import re
        with open('pyproject.toml', 'r') as f:
            content = f.read()
        
        # Add CUDA suffix to VERSION, not package name
        # This creates local version identifiers like 1.0.0+cu118
        content = re.sub(
            r'version = \"([^\"]+)\"',
            lambda m: f'version = \"{m.group(1)}${{ matrix.wheel_suffix }}\"',
            content
        )
        
        with open('pyproject.toml', 'w') as f:
            f.write(content)
        "
        echo "Modified pyproject.toml for CUDA ${{ matrix.cuda_version }}:"
        grep -A5 -B5 "version\|name" pyproject.toml

    # Install build dependencies
    - name: Install build dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build libboost-all-dev
        if [ "${{ matrix.cuda_version }}" != "cpu" ]; then
          sudo apt-get install -y g++-11 gcc-11
          echo "CC=/usr/bin/gcc-11" >> $GITHUB_ENV
          echo "CXX=/usr/bin/g++-11" >> $GITHUB_ENV
        fi

    - name: Install build dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja boost llvm libomp
        # Create symlinks in standard paths for easier discovery by cibuildwheel
        sudo mkdir -p /usr/local/include /usr/local/lib
        sudo ln -sf $(brew --prefix libomp)/include/omp.h /usr/local/include/omp.h || true
        sudo ln -sf $(brew --prefix libomp)/lib/libomp.dylib /usr/local/lib/libomp.dylib || true
        # Set compiler to use LLVM's clang which supports OpenMP better
        echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
        echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV
        echo "LDFLAGS=-L$(brew --prefix libomp)/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$(brew --prefix libomp)/include" >> $GITHUB_ENV

    - name: Install build dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Write-Host "Installing build dependencies for Windows..."
        choco install cmake ninja -y
        
        Write-Host "Installing Boost using vcpkg..."
        git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
        C:\vcpkg\bootstrap-vcpkg.bat
        C:\vcpkg\vcpkg install boost-regex:x64-windows boost-system:x64-windows boost-filesystem:x64-windows boost-xpressive:x64-windows
        
        Write-Host "Setting up Boost environment variables..."
        $VCPKG_ROOT = "C:\vcpkg"
        $BOOST_ROOT = "$VCPKG_ROOT\installed\x64-windows"
        $VCPKG_INSTALLED_DIR = "$VCPKG_ROOT\installed\x64-windows"
        
        Write-Host "Setting BOOST_ROOT to: $BOOST_ROOT"
        echo "BOOST_ROOT=$BOOST_ROOT" >> $env:GITHUB_ENV
        echo "Boost_ROOT=$BOOST_ROOT" >> $env:GITHUB_ENV
        echo "Boost_INCLUDE_DIR=$BOOST_ROOT\include" >> $env:GITHUB_ENV
        echo "CMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" >> $env:GITHUB_ENV
        echo "VCPKG_TARGET_TRIPLET=x64-windows" >> $env:GITHUB_ENV
        echo "CMAKE_PREFIX_PATH=$VCPKG_INSTALLED_DIR" >> $env:GITHUB_ENV

    # Clear any problematic environment variables
    - name: Clear problematic environment variables
      shell: bash
      run: |
        echo "Clearing potentially problematic environment variables"
        unset CIBW_BUILD_SELECTOR || true
        unset CIBW_CONFIG_FILE || true
        unset CIBW_ONLY || true
        # Clear any empty string environment variables that might interfere
        export CIBW_CONFIG_FILE=""
        export CIBW_ONLY=""
        unset CIBW_CONFIG_FILE || true
        unset CIBW_ONLY || true
        echo "Environment cleared"

    # Build wheels using cibuildwheel
    - name: Build wheels (CPU)
      if: matrix.cuda_version == 'cpu'
      uses: pypa/cibuildwheel@v2.17.0
      with:
        output-dir: wheelhouse
      env:
        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux*"
        CIBW_ARCHS_LINUX: x86_64
        CIBW_ARCHS_WINDOWS: AMD64
        CIBW_ARCHS_MACOS: x86_64 arm64
        
        CIBW_ENVIRONMENT_LINUX: "TINYLLAMA_CPP_BUILD_CUDA=0 CMAKE_POLICY_DEFAULT_CMP0167=NEW Python_EXECUTABLE={python} Python_FIND_STRATEGY=LOCATION CMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER SETUPTOOLS_USE_DISTUTILS=stdlib"
        
        CIBW_ENVIRONMENT_WINDOWS: "TINYLLAMA_CPP_BUILD_CUDA=0 CMAKE_POLICY_DEFAULT_CMP0167=NEW CMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake VCPKG_TARGET_TRIPLET=x64-windows"
        
        CIBW_ENVIRONMENT_MACOS: "TINYLLAMA_CPP_BUILD_CUDA=0 CMAKE_FIND_DEBUG_MODE=ON"
        
        CIBW_BEFORE_ALL_LINUX: >
          echo "Installing Boost packages..." &&
          (yum install -y boost-devel boost-regex || 
          (curl -L https://github.com/boostorg/boost/releases/download/boost-1.82.0/boost-1.82.0.tar.gz | tar -xz && 
          cd boost-1.82.0 && 
          ./bootstrap.sh --prefix=/usr/local --with-libraries=regex,system,filesystem && 
          ./b2 install --prefix=/usr/local threading=multi link=shared variant=release -j$(nproc))) &&
          if [ "$TINYLLAMA_CPP_BUILD_CUDA" = "1" ]; then
            echo "Installing CUDA toolkit for manylinux container..." &&
            cd /tmp &&
            if [ ! -d "/usr/local/cuda" ]; then
              CUDA_VERSION_MAJOR=$(echo "$CMAKE_CUDA_ARCHITECTURES" | cut -d';' -f1 | head -c2) &&
              if [ "$CUDA_VERSION_MAJOR" = "75" ] || [ "$CUDA_VERSION_MAJOR" = "80" ]; then
                CUDA_VERSION="11.8"
                CUDA_INSTALLER="cuda_11.8.0_520.61.05_linux.run"
                CUDA_URL="https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/$CUDA_INSTALLER"
              else
                CUDA_VERSION="12.1"
                CUDA_INSTALLER="cuda_12.1.1_530.30.02_linux.run"
                CUDA_URL="https://developer.download.nvidia.com/compute/cuda/12.1.1/local_installers/$CUDA_INSTALLER"
              fi &&
              echo "Downloading CUDA $CUDA_VERSION installer..." &&
              curl -L -o "$CUDA_INSTALLER" "$CUDA_URL" &&
              chmod +x "$CUDA_INSTALLER" &&
              echo "Installing CUDA toolkit (silent install)..." &&
              sh "$CUDA_INSTALLER" --silent --toolkit --installpath=/usr/local/cuda &&
              rm "$CUDA_INSTALLER" &&
              echo "Setting up CUDA environment and symlinks..." &&
              export PATH=/usr/local/cuda/bin:$PATH &&
              export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH &&
              export CUDA_HOME=/usr/local/cuda &&
              export CUDA_ROOT=/usr/local/cuda &&
              export CUDA_PATH=/usr/local/cuda &&
              ln -sf /usr/local/cuda/bin/nvcc /usr/bin/nvcc &&
              echo "Creating library symlinks for CMake discovery..." &&
              ln -sf /usr/local/cuda/lib64 /usr/local/cuda/lib &&
              mkdir -p /usr/lib64 &&
              ln -sf /usr/local/cuda/lib64/* /usr/lib64/ &&
              echo "Verifying CUDA installation..." &&
              ls -la /usr/local/cuda/bin/ &&
              ls -la /usr/local/cuda/lib64/ &&
              echo "CUDA installation complete" &&
              nvcc --version
            else
              echo "CUDA already installed"
            fi
          fi
        
        CIBW_BEFORE_BUILD_LINUX: >
          echo "Setting up Python development environment..." &&
          python -m pip install --upgrade pip setuptools wheel &&
          PYTHON_INCLUDE_DIR=$(python -c "import sysconfig; print(sysconfig.get_path('include'))") &&
          PYTHON_LIBRARY_DIR=$(python -c "import sysconfig; print(sysconfig.get_path('stdlib'))") &&
          PYTHON_EXECUTABLE=$(which python) &&
          echo "Python executable: $PYTHON_EXECUTABLE" &&
          echo "Python include dir: $PYTHON_INCLUDE_DIR" &&
          echo "Python library dir: $PYTHON_LIBRARY_DIR" &&
          ls -la $PYTHON_INCLUDE_DIR || echo "Python include directory not found" &&
          export Python3_EXECUTABLE=$PYTHON_EXECUTABLE &&
          export Python_EXECUTABLE=$PYTHON_EXECUTABLE &&
          export Python3_INCLUDE_DIR=$PYTHON_INCLUDE_DIR &&
          export Python_INCLUDE_DIR=$PYTHON_INCLUDE_DIR &&
          yum install -y python3-devel || 
          (PYTHON_VERSION_SHORT=$(python -c "import sys; print(f'{sys.version_info.major}{sys.version_info.minor}')") &&
          yum install -y python${PYTHON_VERSION_SHORT}-devel) ||
          echo "Python development packages not available, using existing Python installation" &&
          if [ "$TINYLLAMA_CPP_BUILD_CUDA" = "1" ]; then
            echo "=== CUDA VERIFICATION AND SETUP ===" &&
            echo "Checking for CUDA installation..." &&
            ls -la /usr/local/cuda/ || echo "CUDA directory not found!" &&
            ls -la /usr/local/cuda/bin/ || echo "CUDA bin directory not found!" &&
            ls -la /usr/local/cuda/lib64/ || echo "CUDA lib64 directory not found!" &&
            if [ -f "/usr/local/cuda/bin/nvcc" ]; then
              echo "✓ Found nvcc at /usr/local/cuda/bin/nvcc" &&
              /usr/local/cuda/bin/nvcc --version
            else
              echo "✗ nvcc not found!" &&
              exit 1
            fi &&
            echo "Setting CUDA environment variables for build..." &&
            export CUDA_HOME=/usr/local/cuda &&
            export CUDA_ROOT=/usr/local/cuda &&
            export CUDA_PATH=/usr/local/cuda &&
            export CUDAToolkit_ROOT=/usr/local/cuda &&
            export CMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc &&
            export PATH=/usr/local/cuda/bin:$PATH &&
            export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH &&
            echo "CUDA environment set for wheel build"
          else
            echo "CPU-only build, skipping CUDA setup"
          fi
        
        CIBW_BEFORE_BUILD_WINDOWS: >
          echo "Installing build dependencies for Windows CPU build..." &
          pip install cmake ninja &
          echo "Setting up vcpkg for Boost..." &
          if not exist C:\vcpkg (
            echo "Cloning vcpkg..." &
            git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg &
            echo "Bootstrapping vcpkg..." &
            C:\vcpkg\bootstrap-vcpkg.bat
          ) else (
            echo "vcpkg already exists"
          ) &
          echo "Installing Boost components via vcpkg..." &
          C:\vcpkg\vcpkg install boost:x64-windows boost-xpressive:x64-windows &
          echo "Verifying vcpkg toolchain file..." &
          if exist C:\vcpkg\scripts\buildsystems\vcpkg.cmake (
            echo "✓ vcpkg toolchain file found"
          ) else (
            echo "✗ vcpkg toolchain file missing!" & exit 1
          ) &
          echo "Windows CPU build setup complete"
        
        CIBW_BEFORE_BUILD_MACOS: >
          echo "Setting up macOS build environment..." &&
          brew install boost libomp llvm cmake ninja || true &&
          echo "Brew installations complete, detecting architecture..." &&
          if [[ $(uname -m) == "arm64" ]]; then
            BREW_PREFIX="/opt/homebrew"
          else
            BREW_PREFIX="/usr/local"
          fi &&
          echo "Using brew prefix: $BREW_PREFIX" &&
          LIBOMP_PREFIX="$BREW_PREFIX/opt/libomp" &&
          LLVM_PREFIX="$BREW_PREFIX/opt/llvm" &&
          echo "LibOMP prefix: $LIBOMP_PREFIX" &&
          echo "LLVM prefix: $LLVM_PREFIX" &&
          ls -la $LIBOMP_PREFIX/lib/ || echo "LibOMP lib directory not found" &&
          ls -la $LLVM_PREFIX/bin/ || echo "LLVM bin directory not found" &&
          export CC="$LLVM_PREFIX/bin/clang" &&
          export CXX="$LLVM_PREFIX/bin/clang++" &&
          export LDFLAGS="-L$LIBOMP_PREFIX/lib" &&
          export CPPFLAGS="-I$LIBOMP_PREFIX/include" &&
          export OpenMP_ROOT="$LIBOMP_PREFIX" &&
          export OpenMP_omp_LIBRARY="$LIBOMP_PREFIX/lib/libomp.dylib" &&
          export CMAKE_PREFIX_PATH="$LIBOMP_PREFIX:$LLVM_PREFIX:$BREW_PREFIX" &&
          echo "Compilers and OpenMP environment set successfully for macOS CUDA (CPU) build"
        
        CIBW_BUILD_VERBOSITY: 1
        CIBW_TEST_COMMAND: python -c "import tinyllama_cpp; print('Import successful')"
        CIBW_TEST_SKIP: "*-macosx_arm64"

    - name: Setup Visual Studio Environment (Windows CUDA)
      if: matrix.os == 'windows-latest' && matrix.cuda_version != 'cpu'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Build wheels (CUDA)
      if: matrix.cuda_version != 'cpu'
      uses: pypa/cibuildwheel@v2.17.0
      with:
        output-dir: wheelhouse
      env:
        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux*"
        CIBW_ARCHS_LINUX: x86_64
        CIBW_ARCHS_WINDOWS: AMD64
        CIBW_ARCHS_MACOS: x86_64 arm64
        
        CIBW_ENVIRONMENT_LINUX: "TINYLLAMA_CPP_BUILD_CUDA=1 CMAKE_CUDA_ARCHITECTURES=\"75;80;86;89;90\" CMAKE_POLICY_DEFAULT_CMP0167=NEW CUDA_HOME=/usr/local/cuda CUDA_ROOT=/usr/local/cuda CUDA_PATH=/usr/local/cuda CUDAToolkit_ROOT=/usr/local/cuda CMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc Python_EXECUTABLE={python} Python_FIND_STRATEGY=LOCATION CMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER SETUPTOOLS_USE_DISTUTILS=stdlib"
        
        CIBW_ENVIRONMENT_WINDOWS: "TINYLLAMA_CPP_BUILD_CUDA=1 CMAKE_CUDA_ARCHITECTURES=\"75;80;86;89;90\" CMAKE_POLICY_DEFAULT_CMP0167=NEW CMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake VCPKG_TARGET_TRIPLET=x64-windows CMAKE_PREFIX_PATH=C:/vcpkg/installed/x64-windows CMAKE_GENERATOR=Ninja"
        
        CIBW_ENVIRONMENT_MACOS: "TINYLLAMA_CPP_BUILD_CUDA=0 CMAKE_FIND_DEBUG_MODE=ON"
        
        CIBW_BEFORE_ALL_LINUX: >
          echo "Installing Boost packages..." &&
          (yum install -y boost-devel boost-regex || 
          (curl -L https://github.com/boostorg/boost/releases/download/boost-1.82.0/boost-1.82.0.tar.gz | tar -xz && 
          cd boost-1.82.0 && 
          ./bootstrap.sh --prefix=/usr/local --with-libraries=regex,system,filesystem && 
          ./b2 install --prefix=/usr/local threading=multi link=shared variant=release -j$(nproc))) &&
          if [ "$TINYLLAMA_CPP_BUILD_CUDA" = "1" ]; then
            echo "Installing CUDA toolkit for manylinux container..." &&
            cd /tmp &&
            if [ ! -d "/usr/local/cuda" ]; then
              CUDA_VERSION_MAJOR=$(echo "$CMAKE_CUDA_ARCHITECTURES" | cut -d';' -f1 | head -c2) &&
              if [ "$CUDA_VERSION_MAJOR" = "75" ] || [ "$CUDA_VERSION_MAJOR" = "80" ]; then
                CUDA_VERSION="11.8"
                CUDA_INSTALLER="cuda_11.8.0_520.61.05_linux.run"
                CUDA_URL="https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/$CUDA_INSTALLER"
              else
                CUDA_VERSION="12.1"
                CUDA_INSTALLER="cuda_12.1.1_530.30.02_linux.run"
                CUDA_URL="https://developer.download.nvidia.com/compute/cuda/12.1.1/local_installers/$CUDA_INSTALLER"
              fi &&
              echo "Downloading CUDA $CUDA_VERSION installer..." &&
              curl -L -o "$CUDA_INSTALLER" "$CUDA_URL" &&
              chmod +x "$CUDA_INSTALLER" &&
              echo "Installing CUDA toolkit (silent install)..." &&
              sh "$CUDA_INSTALLER" --silent --toolkit --installpath=/usr/local/cuda &&
              rm "$CUDA_INSTALLER" &&
              echo "Setting up CUDA environment and symlinks..." &&
              export PATH=/usr/local/cuda/bin:$PATH &&
              export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH &&
              export CUDA_HOME=/usr/local/cuda &&
              export CUDA_ROOT=/usr/local/cuda &&
              export CUDA_PATH=/usr/local/cuda &&
              ln -sf /usr/local/cuda/bin/nvcc /usr/bin/nvcc &&
              echo "Creating library symlinks for CMake discovery..." &&
              ln -sf /usr/local/cuda/lib64 /usr/local/cuda/lib &&
              mkdir -p /usr/lib64 &&
              ln -sf /usr/local/cuda/lib64/* /usr/lib64/ &&
              echo "Verifying CUDA installation..." &&
              ls -la /usr/local/cuda/bin/ &&
              ls -la /usr/local/cuda/lib64/ &&
              echo "CUDA installation complete" &&
              nvcc --version
            else
              echo "CUDA already installed"
            fi
          fi
        
        CIBW_BEFORE_BUILD_LINUX: >
          echo "Setting up Python development environment..." &&
          python -m pip install --upgrade pip setuptools wheel &&
          PYTHON_INCLUDE_DIR=$(python -c "import sysconfig; print(sysconfig.get_path('include'))") &&
          PYTHON_LIBRARY_DIR=$(python -c "import sysconfig; print(sysconfig.get_path('stdlib'))") &&
          PYTHON_EXECUTABLE=$(which python) &&
          echo "Python executable: $PYTHON_EXECUTABLE" &&
          echo "Python include dir: $PYTHON_INCLUDE_DIR" &&
          echo "Python library dir: $PYTHON_LIBRARY_DIR" &&
          ls -la $PYTHON_INCLUDE_DIR || echo "Python include directory not found" &&
          export Python3_EXECUTABLE=$PYTHON_EXECUTABLE &&
          export Python_EXECUTABLE=$PYTHON_EXECUTABLE &&
          export Python3_INCLUDE_DIR=$PYTHON_INCLUDE_DIR &&
          export Python_INCLUDE_DIR=$PYTHON_INCLUDE_DIR &&
          yum install -y python3-devel || 
          (PYTHON_VERSION_SHORT=$(python -c "import sys; print(f'{sys.version_info.major}{sys.version_info.minor}')") &&
          yum install -y python${PYTHON_VERSION_SHORT}-devel) ||
          echo "Python development packages not available, using existing Python installation" &&
          if [ "$TINYLLAMA_CPP_BUILD_CUDA" = "1" ]; then
            echo "=== CUDA VERIFICATION AND SETUP ===" &&
            echo "Checking for CUDA installation..." &&
            ls -la /usr/local/cuda/ || echo "CUDA directory not found!" &&
            ls -la /usr/local/cuda/bin/ || echo "CUDA bin directory not found!" &&
            ls -la /usr/local/cuda/lib64/ || echo "CUDA lib64 directory not found!" &&
            if [ -f "/usr/local/cuda/bin/nvcc" ]; then
              echo "✓ Found nvcc at /usr/local/cuda/bin/nvcc" &&
              /usr/local/cuda/bin/nvcc --version
            else
              echo "✗ nvcc not found!" &&
              exit 1
            fi &&
            echo "Setting CUDA environment variables for build..." &&
            export CUDA_HOME=/usr/local/cuda &&
            export CUDA_ROOT=/usr/local/cuda &&
            export CUDA_PATH=/usr/local/cuda &&
            export CUDAToolkit_ROOT=/usr/local/cuda &&
            export CMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc &&
            export PATH=/usr/local/cuda/bin:$PATH &&
            export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH &&
            echo "CUDA environment set for wheel build"
          else
            echo "CPU-only build, skipping CUDA setup"
          fi
        
        CIBW_BEFORE_BUILD_WINDOWS: >
          echo "Installing build dependencies for Windows CUDA build..." &
          pip install cmake ninja &
          echo "Setting up vcpkg for Boost..." &
          if not exist C:\vcpkg (
            echo "Cloning vcpkg..." &
            git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg &
            echo "Bootstrapping vcpkg..." &
            C:\vcpkg\bootstrap-vcpkg.bat
          ) else (
            echo "vcpkg already exists"
          ) &
          echo "Installing Boost components via vcpkg..." &
          C:\vcpkg\vcpkg install boost:x64-windows boost-xpressive:x64-windows &
          echo "Detecting and using host CUDA installation..." &
          for /d %%i in ("C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v*") do set "DETECTED_CUDA_PATH=%%i" &
          if not defined DETECTED_CUDA_PATH (
            echo "No CUDA installation detected, trying default paths..." &
            set "DETECTED_CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1"
          ) &
          echo "Using CUDA path: %DETECTED_CUDA_PATH%" &
          echo "Setting up comprehensive CUDA environment variables..." &
          set "CUDA_PATH=%DETECTED_CUDA_PATH%" &
          set "CUDA_HOME=%DETECTED_CUDA_PATH%" &
          set "CUDA_ROOT=%DETECTED_CUDA_PATH%" &
          set "CUDAToolkit_ROOT=%DETECTED_CUDA_PATH%" &
          set "CUDA_TOOLKIT_ROOT_DIR=%DETECTED_CUDA_PATH%" &
          set "CMAKE_CUDA_COMPILER=%DETECTED_CUDA_PATH%\bin\nvcc.exe" &
          set "PATH=%DETECTED_CUDA_PATH%\bin;%DETECTED_CUDA_PATH%\libnvvp;%PATH%" &
          set "CUDA_LIB_PATH=%DETECTED_CUDA_PATH%\lib\x64" &
          set "CUDA_INC_PATH=%DETECTED_CUDA_PATH%\include" &
          echo "Set CMAKE_CUDA_COMPILER to: %CMAKE_CUDA_COMPILER%" &
          echo "Verifying CUDA installation structure..." &
          dir "%DETECTED_CUDA_PATH%" &
          dir "%DETECTED_CUDA_PATH%\bin" &
          dir "%DETECTED_CUDA_PATH%\lib\x64" &
          dir "%DETECTED_CUDA_PATH%\include" &
          "%DETECTED_CUDA_PATH%\bin\nvcc.exe" --version &
          echo "CUDA compilation test successful!" &
          echo "Verifying vcpkg toolchain file..." &
          if exist C:\vcpkg\scripts\buildsystems\vcpkg.cmake (
            echo "✓ vcpkg toolchain file found"
          ) else (
            echo "✗ vcpkg toolchain file missing!" & exit 1
          ) &
          echo "Windows CUDA build setup complete"
        
        CIBW_BEFORE_BUILD_MACOS: >
          echo "Setting up macOS build environment..." &&
          brew install boost libomp llvm cmake ninja || true &&
          echo "Brew installations complete, detecting architecture..." &&
          if [[ $(uname -m) == "arm64" ]]; then
            BREW_PREFIX="/opt/homebrew"
          else
            BREW_PREFIX="/usr/local"
          fi &&
          echo "Using brew prefix: $BREW_PREFIX" &&
          LIBOMP_PREFIX="$BREW_PREFIX/opt/libomp" &&
          LLVM_PREFIX="$BREW_PREFIX/opt/llvm" &&
          echo "LibOMP prefix: $LIBOMP_PREFIX" &&
          echo "LLVM prefix: $LLVM_PREFIX" &&
          ls -la $LIBOMP_PREFIX/lib/ || echo "LibOMP lib directory not found" &&
          ls -la $LLVM_PREFIX/bin/ || echo "LLVM bin directory not found" &&
          export CC="$LLVM_PREFIX/bin/clang" &&
          export CXX="$LLVM_PREFIX/bin/clang++" &&
          export LDFLAGS="-L$LIBOMP_PREFIX/lib" &&
          export CPPFLAGS="-I$LIBOMP_PREFIX/include" &&
          export OpenMP_ROOT="$LIBOMP_PREFIX" &&
          export OpenMP_omp_LIBRARY="$LIBOMP_PREFIX/lib/libomp.dylib" &&
          export CMAKE_PREFIX_PATH="$LIBOMP_PREFIX:$LLVM_PREFIX:$BREW_PREFIX" &&
          echo "Compilers and OpenMP environment set successfully for macOS CUDA (CPU) build"
        
        CIBW_BUILD_VERBOSITY: 1
        CIBW_TEST_COMMAND: python -c "import tinyllama_cpp; print('Import successful')"
        CIBW_TEST_SKIP: "*-macosx_arm64"

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.cuda_version }}
        path: ./wheelhouse/*.whl

  # Combine all wheels into a single artifact
  collect_wheels:
    name: Collect all wheels
    needs: build_wheels
    runs-on: ubuntu-latest
    steps:
    - name: Download all wheel artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-wheels

    - name: Flatten wheel directory
      run: |
        mkdir -p dist
        find all-wheels -name "*.whl" -exec cp {} dist/ \;
        ls -la dist/

    - name: Upload combined wheels
      uses: actions/upload-artifact@v4
      with:
        name: all-wheels
        path: dist/*.whl

  # Publish to PyPI on tags
  publish:
    name: Publish to PyPI
    needs: collect_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        name: all-wheels
        path: dist

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        verbose: true 