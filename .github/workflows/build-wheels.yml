name: Build Wheels

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.cuda_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # CPU-only builds
          - os: ubuntu-latest
            cuda_version: "cpu"
            cuda_toolkit: ""
            wheel_suffix: ""
          - os: windows-latest
            cuda_version: "cpu"
            cuda_toolkit: ""
            wheel_suffix: ""
          - os: macos-latest
            cuda_version: "cpu"
            cuda_toolkit: ""
            wheel_suffix: ""
          
          # GPU builds (Linux only for now - most common for GPU workloads)
          - os: ubuntu-latest
            cuda_version: "11.8"
            cuda_toolkit: "cuda-toolkit-11-8"
            wheel_suffix: "+cu118"
          - os: ubuntu-latest
            cuda_version: "12.1"
            cuda_toolkit: "cuda-toolkit-12-1"
            wheel_suffix: "+cu121"
          - os: ubuntu-latest
            cuda_version: "12.4"
            cuda_toolkit: "cuda-toolkit-12-4"
            wheel_suffix: "+cu124"
          
          # Windows GPU builds
          - os: windows-latest
            cuda_version: "11.8"
            cuda_toolkit: "11.8.0"
            wheel_suffix: "+cu118"
          - os: windows-latest
            cuda_version: "12.1"
            cuda_toolkit: "12.1.0"
            wheel_suffix: "+cu121"

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel cibuildwheel

    # Setup Mamba for Linux CUDA builds
    - name: Setup Mamba (Linux CUDA Build)
      if: matrix.os == 'ubuntu-latest' && matrix.cuda_version != 'cpu'
      uses: conda-incubator/setup-miniconda@v3.1.0
      with:
        activate-environment: "cuda-env"
        python-version: '3.11'
        miniforge-version: latest
        add-pip-as-python-dependency: true
        auto-activate-base: false

    # Linux CUDA setup using Mamba (more reliable than apt packages)
    - name: Install CUDA Toolkit via Mamba (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.cuda_version != 'cpu'
      shell: bash -el {0}
      run: |
        echo "Installing CUDA ${{ matrix.cuda_version }} toolkit using Mamba..."
        if [ "${{ matrix.cuda_version }}" == "12.1" ]; then
          mamba install -y -n cuda-env -c nvidia/label/cuda-12.1.1 cuda-toolkit
        elif [ "${{ matrix.cuda_version }}" == "12.4" ]; then
          mamba install -y -n cuda-env -c nvidia/label/cuda-12.4.0 cuda-toolkit
        elif [ "${{ matrix.cuda_version }}" == "11.8" ]; then
          mamba install -y -n cuda-env -c nvidia/label/cuda-11.8.0 cuda-toolkit
        else
          echo "Unsupported CUDA version: ${{ matrix.cuda_version }}"
          exit 1
        fi
        echo "CUDA_HOME=${CONDA_PREFIX}" >> $GITHUB_ENV
        echo "CUDA_TOOLKIT_ROOT_DIR=${CONDA_PREFIX}" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${CONDA_PREFIX}/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
        echo "${CONDA_PREFIX}/bin" >> $GITHUB_PATH
        which nvcc
        nvcc --version
        
        # Export CUDA paths for use outside conda environment
        echo "CUDA_BIN_PATH=${CONDA_PREFIX}/bin" >> $GITHUB_ENV
        echo "CUDA_LIB_PATH=${CONDA_PREFIX}/lib64" >> $GITHUB_ENV

    # Windows CUDA setup
    - name: Install CUDA Toolkit (Windows)
      if: matrix.os == 'windows-latest' && matrix.cuda_version != 'cpu'
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: ${{ matrix.cuda_toolkit }}
        method: 'network'
        sub-packages: '["nvcc", "cudart", "cublas", "cublas_dev", "curand", "curand_dev"]'

    # Set build environment variables
    - name: Set build environment
      shell: bash
      run: |
        if [ "${{ matrix.cuda_version }}" != "cpu" ]; then
          echo "TINYLLAMA_CPP_BUILD_CUDA=1" >> $GITHUB_ENV
          echo "CMAKE_CUDA_ARCHITECTURES=75;80;86;89;90" >> $GITHUB_ENV
        else
          echo "TINYLLAMA_CPP_BUILD_CUDA=0" >> $GITHUB_ENV
        fi

    # Modify version for CUDA builds
    - name: Modify package version for CUDA builds
      if: matrix.cuda_version != 'cpu'
      shell: bash
      run: |
        # Create a modified pyproject.toml with CUDA suffix
        python -c "
        import re
        with open('pyproject.toml', 'r') as f:
            content = f.read()
        
        # Add CUDA suffix to package name
        content = re.sub(
            r'name = \"tinyllama-cpp\"',
            f'name = \"tinyllama-cpp${{ matrix.wheel_suffix }}\"',
            content
        )
        
        with open('pyproject.toml', 'w') as f:
            f.write(content)
        "

    # Install build dependencies
    - name: Install build dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build libboost-all-dev
        if [ "${{ matrix.cuda_version }}" != "cpu" ]; then
          sudo apt-get install -y g++-11 gcc-11
          echo "CC=/usr/bin/gcc-11" >> $GITHUB_ENV
          echo "CXX=/usr/bin/g++-11" >> $GITHUB_ENV
        fi

    - name: Install build dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja boost llvm libomp
        # Create symlinks in standard paths for easier discovery by cibuildwheel
        sudo mkdir -p /usr/local/include /usr/local/lib
        sudo ln -sf $(brew --prefix libomp)/include/omp.h /usr/local/include/omp.h || true
        sudo ln -sf $(brew --prefix libomp)/lib/libomp.dylib /usr/local/lib/libomp.dylib || true
        echo "LDFLAGS=-L$(brew --prefix libomp)/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$(brew --prefix libomp)/include" >> $GITHUB_ENV

    - name: Install build dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake ninja

    # Deactivate conda environment for CUDA builds to avoid Python version parsing issues
    - name: Deactivate conda environment
      if: matrix.cuda_version != 'cpu' && matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        echo "Deactivating conda environment to use system Python for cibuildwheel"
        conda deactivate || true
        # Ensure system Python is used
        which python3
        python3 --version
        # Remove conda from PATH to prevent auto-activation
        echo "PATH=$(echo $PATH | tr ':' '\n' | grep -v conda | tr '\n' ':')" >> $GITHUB_ENV
        # Unset conda environment variables
        echo "CONDA_DEFAULT_ENV=" >> $GITHUB_ENV
        echo "CONDA_PREFIX=" >> $GITHUB_ENV
        echo "CONDA_PROMPT_MODIFIER=" >> $GITHUB_ENV

    # Build wheels using cibuildwheel
    - name: Build wheels (CPU)
      if: matrix.cuda_version == 'cpu'
      uses: pypa/cibuildwheel@v2.16.2
      env:
        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux*"
        CIBW_ARCHS_LINUX: x86_64
        CIBW_ARCHS_WINDOWS: AMD64
        CIBW_ARCHS_MACOS: x86_64 arm64
        
        CIBW_ENVIRONMENT_LINUX: >
          TINYLLAMA_CPP_BUILD_CUDA=0
          CMAKE_POLICY_DEFAULT_CMP0167=NEW
          
        CIBW_ENVIRONMENT_WINDOWS: >
          TINYLLAMA_CPP_BUILD_CUDA=0
          CMAKE_POLICY_DEFAULT_CMP0167=NEW
          
        CIBW_ENVIRONMENT_MACOS: >
          TINYLLAMA_CPP_BUILD_CUDA=0
          LDFLAGS=-L/usr/local/lib
          CPPFLAGS=-I/usr/local/include
          OpenMP_ROOT=/usr/local
          
        CIBW_BEFORE_ALL_LINUX: >
          yum install -y boost-devel boost-static ||
          (curl -L https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.bz2 | tar -xj &&
          cd boost_1_82_0 &&
          ./bootstrap.sh --prefix=/usr/local &&
          ./b2 install --with-regex --with-system --with-filesystem threading=multi link=shared)
          
        CIBW_BEFORE_BUILD_LINUX: >
          echo "Using system Boost libraries" &&
          echo "Available libraries:" &&
          (find /usr -name "*boost*" -type f 2>/dev/null | head -10 || true)
        
        CIBW_BEFORE_BUILD_WINDOWS: >
          pip install cmake ninja &&
          echo "Windows Boost will be handled by vcpkg in CMake"
        
        CIBW_BEFORE_BUILD_MACOS: >
          brew install boost libomp || true
        
        CIBW_BUILD_VERBOSITY: 1
        CIBW_TEST_COMMAND: python -c "import tinyllama_cpp; print('Import successful')"
        CIBW_TEST_SKIP: "*-macosx_arm64"

    - name: Build wheels (CUDA)
      if: matrix.cuda_version != 'cpu'
      uses: pypa/cibuildwheel@v2.16.2
      env:
        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux*"
        CIBW_ARCHS_LINUX: x86_64
        CIBW_ARCHS_WINDOWS: AMD64
        CIBW_ARCHS_MACOS: x86_64 arm64
        
        CIBW_ENVIRONMENT_LINUX: >
          TINYLLAMA_CPP_BUILD_CUDA=1
          CMAKE_CUDA_ARCHITECTURES=${{ env.CMAKE_CUDA_ARCHITECTURES }}
          CUDA_HOME=${{ env.CUDA_HOME }}
          PATH=${{ env.CUDA_BIN_PATH }}:/usr/local/bin:/usr/bin:/bin
          LD_LIBRARY_PATH=${{ env.CUDA_LIB_PATH }}:$LD_LIBRARY_PATH
          CMAKE_POLICY_DEFAULT_CMP0167=NEW
        
        CIBW_ENVIRONMENT_WINDOWS: >
          TINYLLAMA_CPP_BUILD_CUDA=1
          CMAKE_CUDA_ARCHITECTURES=${{ env.CMAKE_CUDA_ARCHITECTURES }}
          CMAKE_POLICY_DEFAULT_CMP0167=NEW
          
        CIBW_ENVIRONMENT_MACOS: >
          TINYLLAMA_CPP_BUILD_CUDA=0
          LDFLAGS=-L/usr/local/lib
          CPPFLAGS=-I/usr/local/include
          OpenMP_ROOT=/usr/local
        
        CIBW_BEFORE_ALL_LINUX: >
          yum install -y boost-devel boost-static ||
          (curl -L https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.bz2 | tar -xj &&
          cd boost_1_82_0 &&
          ./bootstrap.sh --prefix=/usr/local &&
          ./b2 install --with-regex --with-system --with-filesystem threading=multi link=shared)
          
        CIBW_BEFORE_BUILD_LINUX: >
          echo "Using system Boost libraries" &&
          echo "Available libraries:" &&
          (find /usr -name "*boost*" -type f 2>/dev/null | head -10 || true)
        
        CIBW_BEFORE_BUILD_WINDOWS: pip install cmake ninja
        CIBW_BEFORE_BUILD_MACOS: >
          brew install boost libomp || true
        
        CIBW_BUILD_VERBOSITY: 1
        CIBW_TEST_COMMAND: python -c "import tinyllama_cpp; print('Import successful')"
        CIBW_TEST_SKIP: "*-macosx_arm64"

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.cuda_version }}
        path: ./wheelhouse/*.whl

  # Combine all wheels into a single artifact
  collect_wheels:
    name: Collect all wheels
    needs: build_wheels
    runs-on: ubuntu-latest
    steps:
    - name: Download all wheel artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-wheels

    - name: Flatten wheel directory
      run: |
        mkdir -p dist
        find all-wheels -name "*.whl" -exec cp {} dist/ \;
        ls -la dist/

    - name: Upload combined wheels
      uses: actions/upload-artifact@v4
      with:
        name: all-wheels
        path: dist/*.whl

  # Publish to PyPI on tags
  publish:
    name: Publish to PyPI
    needs: collect_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        name: all-wheels
        path: dist

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        verbose: true 