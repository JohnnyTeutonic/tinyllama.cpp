name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ github.event.inputs.version || github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ github.event.inputs.version }}
          git push origin ${{ github.event.inputs.version }}
          # Wait for tag to be available
          sleep 10
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          name: Release ${{ github.event.inputs.version || github.ref_name }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}
          token: ${{ secrets.GITHUB_TOKEN }}

  build-and-release:
    name: Build & Release (${{ matrix.os }} - ${{ matrix.build_type }})
    permissions:
      contents: write
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            build_type: cpu
            artifact_name: tinyllama-linux-cpu
            asset_name: tinyllama-linux-cpu.tar.gz
            cmake_flags: "-DHAS_CUDA=OFF"
          - os: ubuntu-latest
            build_type: cuda
            artifact_name: tinyllama-linux-cuda
            asset_name: tinyllama-linux-cuda.tar.gz
            cmake_flags: "-DHAS_CUDA=ON"
          - os: windows-latest
            build_type: cpu
            artifact_name: tinyllama-windows-cpu
            asset_name: tinyllama-windows-cpu.zip
            cmake_flags: "-DHAS_CUDA=OFF"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.create-release.outputs.version }}

      - name: Cache Chocolatey packages and Boost (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            C:\ProgramData\chocolatey\lib
            C:\local\boost_1_81_0
            C:\Boost
          key: ${{ runner.os }}-choco-boost-1.81.0-${{ hashFiles('**/release.yml') }}
          restore-keys: |
            ${{ runner.os }}-choco-boost-1.81.0-
            ${{ runner.os }}-choco-boost-

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.27.0'

      - name: Setup Mamba (Linux CUDA Build)
        if: runner.os == 'Linux' && matrix.build_type == 'cuda'
        uses: conda-incubator/setup-miniconda@v3.1.0
        with:
          activate-environment: "cuda-env"
          python-version: ${{ matrix.python-version || '3.10' }} # Default or from matrix if you add python versions
          miniforge-version: latest
          add-pip-as-python-dependency: true
          auto-activate-base: false

      - name: Install CUDA Toolkit 12.1.1 via Mamba (Linux CUDA Build)
        if: runner.os == 'Linux' && matrix.build_type == 'cuda'
        shell: bash -el {0} # Important for conda activation
        run: |
          echo "Installing CUDA 12.1.1 toolkit using Mamba..."
          mamba install -y -n cuda-env -c nvidia/label/cuda-12.1.1 cuda-toolkit
          echo "CONDA_PREFIX_1=$CONDA_PREFIX_1" # For debugging
          echo "CONDA_PREFIX=$CONDA_PREFIX" # For debugging
          echo "CUDA_HOME=${CONDA_PREFIX}" >> $GITHUB_ENV
          echo "CUDA_TOOLKIT_ROOT_DIR=${CONDA_PREFIX}" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${CONDA_PREFIX}/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
          echo "${CONDA_PREFIX}/bin" >> $GITHUB_PATH
          # Verify nvcc
          which nvcc
          nvcc --version

      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential doxygen graphviz libboost-all-dev
          if [ "${{ matrix.build_type }}" == "cuda" ]; then
            echo "Installing gcc-12 and g++-12 for CUDA build"
            sudo apt-get install -y gcc-12 g++-12
            echo "CC=/usr/bin/gcc-12" >> $GITHUB_ENV
            echo "CXX=/usr/bin/g++-12" >> $GITHUB_ENV
          fi

      - name: Install Dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Attempting to upgrade Chocolatey (default sources)..."
          choco upgrade chocolatey -y # Try without explicit source first for upgrade
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "Chocolatey upgrade failed or was not necessary. Continuing..."
          }

          $packagesToInstall = @(
            @{ Name = "doxygen.install"; LogName = "Doxygen" },
            @{ Name = "graphviz"; LogName = "Graphviz" },
            @{ Name = "openssl"; LogName = "OpenSSL" },
            @{ Name = "boost-msvc-14.3"; Version = "1.81.0"; LogName = "Boost" } 
          )
          $allSucceeded = $true

          foreach ($package in $packagesToInstall) {
            $installArgs = @($package.Name, "-y", "--debug", "--verbose")
            if ($package.PSObject.Properties['Version']) {
              $installArgs += "--version=$($package.Version)"
            }
            
            Write-Host "Attempting to install $($package.LogName) (default sources first)..."
            choco install @installArgs
            if ($LASTEXITCODE -ne 0) {
              Write-Warning "Failed to install $($package.LogName) with default sources. Exit code: $LASTEXITCODE. Retrying with explicit community source..."
              $communityInstallArgs = $installArgs + "--source=https://community.chocolatey.org/api/v2/"
              choco install @communityInstallArgs
              if ($LASTEXITCODE -ne 0) {
                Write-Error "Failed to install $($package.LogName) even with explicit community source. Exit code: $LASTEXITCODE"
                $allSucceeded = $false
              } else {
                Write-Host "$($package.LogName) installed successfully with explicit community source."
              }
            } else {
              Write-Host "$($package.LogName) installed successfully with default sources."
            }
          }

          if (-not $allSucceeded) {
            Write-Error "One or more Chocolatey packages failed to install."
            exit 1
          }
          Write-Host "All Chocolatey packages installed successfully."

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        env: # Make CC and CXX available here explicitly from GITHUB_ENV for CUDA builds
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
        shell: bash -el {0} # Ensure conda env is active if it's a CUDA build
        run: |
          echo "DEBUG: Current matrix.os: ${{ matrix.os }}, matrix.build_type: ${{ matrix.build_type }}"
          echo "DEBUG: Initial matrix.cmake_flags: ${{ matrix.cmake_flags }}"
          echo "Forcibly removing existing build directory if any..."
          rm -rf build
          mkdir build
          cd build
          CMAKE_EXTRA_ARGS=""
          if [ "${{ matrix.build_type }}" == "cuda" ]; then
            echo "Verifying nvcc path and CUDA_HOME / CUDA_TOOLKIT_ROOT_DIR:"
            which nvcc
            nvcc --version
            echo "CUDA_HOME is: $CUDA_HOME"
            echo "CUDA_TOOLKIT_ROOT_DIR is: $CUDA_TOOLKIT_ROOT_DIR"
            echo "LD_LIBRARY_PATH is: $LD_LIBRARY_PATH"
            if [ -z "$CUDA_HOME" ] || [ ! -f "$CUDA_HOME/bin/nvcc" ]; then
              echo "Error: CUDA_HOME is not correctly set or nvcc not found in $CUDA_HOME/bin/nvcc."
              exit 1
            fi
            
            HOST_CXX_FOR_NVCC="/usr/bin/g++-12" 
            if [ -n "$CXX" ] && command -v $CXX &> /dev/null; then
                echo "Using CXX from GITHUB_ENV: $CXX for nvcc -ccbin"
                HOST_CXX_FOR_NVCC="$CXX"
            elif command -v /usr/bin/g++-12 &> /dev/null; then
                echo "GITHUB_ENV CXX not found or invalid, using /usr/bin/g++-12 for nvcc -ccbin"
                HOST_CXX_FOR_NVCC="/usr/bin/g++-12"
            else
                echo "Warning: Neither GITHUB_ENV CXX nor /usr/bin/g++-12 found. nvcc might pick an incompatible host compiler."
            fi
            echo "Final host CXX for nvcc -ccbin (used for CMAKE_CUDA_HOST_COMPILER): $HOST_CXX_FOR_NVCC"

            CMAKE_EXTRA_ARGS="-DCMAKE_CUDA_COMPILER=${CUDA_HOME}/bin/nvcc"
            CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DCMAKE_CUDA_ARCHITECTURES=all"
            CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DCMAKE_CUDA_HOST_COMPILER=${HOST_CXX_FOR_NVCC}"
            CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DCMAKE_CUDA_FLAGS=-allow-unsupported-compiler"
          fi
          echo "Configuring CMake with effective matrix.cmake_flags: ${{ matrix.cmake_flags }} and CMAKE_EXTRA_ARGS: ${CMAKE_EXTRA_ARGS}"
          cmake .. -DCMAKE_BUILD_TYPE=Release ${{ matrix.cmake_flags }} ${CMAKE_EXTRA_ARGS}

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Attempt to clear any potentially conflicting environment variables first
          echo "BOOST_ROOT=" >> $env:GITHUB_ENV
          echo "BOOST_INCLUDEDIR=" >> $env:GITHUB_ENV
          echo "BOOST_LIBRARYDIR=" >> $env:GITHUB_ENV

          $BOOST_VERSION_UNDERSCORE = "1_81_0" # Corresponds to version 1.81.0 being installed
          $TARGET_BOOST_ROOT_DIR = "C:\local\boost_$($BOOST_VERSION_UNDERSCORE)"

          if (-not (Test-Path $TARGET_BOOST_ROOT_DIR)) {
            Write-Warning "Boost not found at the expected installation path $TARGET_BOOST_ROOT_DIR. Trying C:\Boost as a fallback."
            $TARGET_BOOST_ROOT_DIR = "C:\Boost" # Generic fallback path
            if (-not (Test-Path $TARGET_BOOST_ROOT_DIR)) {
              Write-Warning "Boost also not found at C:\Boost. CMake configuration may fail if Boost is not discoverable by other means."
            }
          }
          
          Write-Host "Setting BOOST_ROOT for CMake to: $TARGET_BOOST_ROOT_DIR"
          echo "BOOST_ROOT=$TARGET_BOOST_ROOT_DIR" >> $env:GITHUB_ENV

          Write-Host "Listing contents of supposed BOOST_ROOT: $TARGET_BOOST_ROOT_DIR"
          Get-ChildItem -Path $TARGET_BOOST_ROOT_DIR -ErrorAction SilentlyContinue

          Write-Host "Checking for '$TARGET_BOOST_ROOT_DIR\boost' directory..."
          if (Test-Path "$TARGET_BOOST_ROOT_DIR\boost") {
              Write-Host "Found '$TARGET_BOOST_ROOT_DIR\boost'"
              Get-ChildItem -Path "$TARGET_BOOST_ROOT_DIR\boost" -Recurse -Depth 1 -ErrorAction SilentlyContinue | Select-Object -First 10
          } else {
              Write-Warning "'$TARGET_BOOST_ROOT_DIR\boost' NOT found."
          }

          Write-Host "Checking for '$TARGET_BOOST_ROOT_DIR\include\boost' directory..."
          if (Test-Path "$TARGET_BOOST_ROOT_DIR\include\boost") {
              Write-Host "Found '$TARGET_BOOST_ROOT_DIR\include\boost'"
              Get-ChildItem -Path "$TARGET_BOOST_ROOT_DIR\include\boost" -Recurse -Depth 1 -ErrorAction SilentlyContinue | Select-Object -First 10
          } else {
              Write-Warning "'$TARGET_BOOST_ROOT_DIR\include\boost' NOT found."
          }

          Write-Host "Listing contents of supposed Boost lib dir: $TARGET_BOOST_ROOT_DIR\lib64-msvc-14.3"
          Get-ChildItem -Path "$TARGET_BOOST_ROOT_DIR\lib64-msvc-14.3" -ErrorAction SilentlyContinue
          Write-Host "Listing contents of supposed Boost lib dir: $TARGET_BOOST_ROOT_DIR\lib32-msvc-14.3"
          Get-ChildItem -Path "$TARGET_BOOST_ROOT_DIR\lib32-msvc-14.3" -ErrorAction SilentlyContinue
          Write-Host "Listing contents of supposed Boost lib dir: $TARGET_BOOST_ROOT_DIR\lib"
          Get-ChildItem -Path "$TARGET_BOOST_ROOT_DIR\lib" -ErrorAction SilentlyContinue

          if (Test-Path "build") {
            Remove-Item -Recurse -Force "build" | Out-Null
          }
          New-Item -ItemType Directory -Force -Path "build"
          Set-Location "build"
          # Pass BOOST_ROOT directly, disable system path searching for Boost, and include Generator/Architecture
          # Also, explicitly unset BOOST_ROOT from cache first to ensure our value is taken
          cmake .. -U BOOST_ROOT -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DBOOST_ROOT="$TARGET_BOOST_ROOT_DIR" -DBoost_DEBUG=ON -DBoost_NO_SYSTEM_PATHS=ON ${{ matrix.cmake_flags }}

      - name: Build (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cd build
          echo "Building Linux targets: tinyllama, tinyllama_server"
          cmake --build . --config Release --target tinyllama tinyllama_server -j $(nproc)

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-Location build
          Write-Host "Building Windows targets: tinyllama, tinyllama_server"
          cmake --build . --config Release --target tinyllama tinyllama_server

      - name: Package (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Preparing Linux package for build type: ${{ matrix.build_type }}"
          echo "Listing contents of build directory:"
          ls -l build/
          
          ARTIFACT_DIR=${{ matrix.artifact_name }}
          mkdir -p $ARTIFACT_DIR
          
          echo "Copying executables..."
          if [ -f build/tinyllama ]; then
            cp build/tinyllama $ARTIFACT_DIR/
          else
            echo "ERROR: build/tinyllama not found!"
            exit 1
          fi
          
          if [ -f build/tinyllama_server ]; then
            cp build/tinyllama_server $ARTIFACT_DIR/
          else
            echo "ERROR: build/tinyllama_server not found! (This might be expected for SKBUILD if not a server build, but CI should build it)"
            # For CI release builds, tinyllama_server should generally be present unless specifically excluded by build_type logic
            if [ "${{ matrix.build_type }}" != "some_non_server_build_type_if_it_exists" ]; then # Adjust condition if needed
                 exit 1
            fi
          fi
          
          cp README.md $ARTIFACT_DIR/
          
          echo "Contents of staging directory $ARTIFACT_DIR:"
          ls -l $ARTIFACT_DIR
          
          echo "Creating tarball ${{ matrix.asset_name }}..."
          tar czf ${{ matrix.asset_name }} $ARTIFACT_DIR
          echo "Tarball created."

      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path ${{ matrix.artifact_name }}
          Copy-Item -Path "build/Release/tinyllama.exe" -Destination "${{ matrix.artifact_name }}/"
          Copy-Item -Path "build/Release/tinyllama_server.exe" -Destination "${{ matrix.artifact_name }}/"
          Copy-Item -Path "README.md" -Destination "${{ matrix.artifact_name }}/"
          7z a ${{ matrix.asset_name }} ${{ matrix.artifact_name }}

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: ${{ matrix.asset_name }}
          token: ${{ secrets.GITHUB_TOKEN }} 