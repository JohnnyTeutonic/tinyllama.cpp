name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ github.event.inputs.version || github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ github.event.inputs.version }}
          git push origin ${{ github.event.inputs.version }}
          # Wait for tag to be available
          sleep 10
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          name: Release ${{ github.event.inputs.version || github.ref_name }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}
          token: ${{ secrets.GITHUB_TOKEN }}

  build-and-release:
    permissions:
      contents: write
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            build_type: cpu
            artifact_name: tinyllama-linux-cpu
            asset_name: tinyllama-linux-cpu.tar.gz
            cmake_flags: "-DHAS_CUDA=OFF"
          - os: ubuntu-latest
            build_type: cuda
            artifact_name: tinyllama-linux-cuda
            asset_name: tinyllama-linux-cuda.tar.gz
            cmake_flags: "-DHAS_CUDA=ON"
          - os: windows-latest
            build_type: cpu
            artifact_name: tinyllama-windows-cpu
            asset_name: tinyllama-windows-cpu.zip
            cmake_flags: "-DHAS_CUDA=OFF"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.create-release.outputs.version }}

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.27.0'

      - name: Setup CUDA Toolkit (Linux CUDA Build)
        if: runner.os == 'Linux' && matrix.build_type == 'cuda'
        uses: Jimver/cuda-toolkit@v0.2.23
        with:
          cuda: '11.8'

      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential doxygen graphviz libboost-all-dev

      - name: Install Dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install doxygen.install graphviz openssl boost -y

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release ${{ matrix.cmake_flags }}

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path build
          Set-Location build
          cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release ${{ matrix.cmake_flags }}

      - name: Build
        run: |
          cd build
          cmake --build . --config Release

      - name: Package (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir -p ${{ matrix.artifact_name }}
          cp build/tinyllama ${{ matrix.artifact_name }}/
          cp build/tinyllama_server ${{ matrix.artifact_name }}/
          cp README.md ${{ matrix.artifact_name }}/
          tar czf ${{ matrix.asset_name }} ${{ matrix.artifact_name }}

      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path ${{ matrix.artifact_name }}
          Copy-Item -Path "build/Release/tinyllama.exe" -Destination "${{ matrix.artifact_name }}/"
          Copy-Item -Path "build/Release/tinyllama_server.exe" -Destination "${{ matrix.artifact_name }}/"
          Copy-Item -Path "README.md" -Destination "${{ matrix.artifact_name }}/"
          7z a ${{ matrix.asset_name }} ${{ matrix.artifact_name }}

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: ${{ matrix.asset_name }}
          token: ${{ secrets.GITHUB_TOKEN }} 